# automatically generated by the FlatBuffers compiler, do not modify

# namespace: StreamInfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Partition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPartition(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Partition()
        x.Init(buf, n + offset)
        return x

    # Partition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Partition
    def GraphMetadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from StreamInfo.GraphMetadata import GraphMetadata
            obj = GraphMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Partition
    def PartitionConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from StreamInfo.PartitionConfiguration import PartitionConfiguration
            obj = PartitionConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Partition
    def Runtime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from StreamInfo.RunTime import RunTime
            obj = RunTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Partition
    def MemoryConsumption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from StreamInfo.MemoryConsumption import MemoryConsumption
            obj = MemoryConsumption()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Partition
    def ClusteringMetrics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from StreamInfo.ClusteringMetrics import ClusteringMetrics
            obj = ClusteringMetrics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PartitionStart(builder): builder.StartObject(5)
def PartitionAddGraphMetadata(builder, graphMetadata): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(graphMetadata), 0)
def PartitionAddPartitionConfiguration(builder, partitionConfiguration): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(partitionConfiguration), 0)
def PartitionAddRuntime(builder, runtime): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(runtime), 0)
def PartitionAddMemoryConsumption(builder, memoryConsumption): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(memoryConsumption), 0)
def PartitionAddClusteringMetrics(builder, clusteringMetrics): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(clusteringMetrics), 0)
def PartitionEnd(builder): return builder.EndObject()
