# automatically generated by the FlatBuffers compiler, do not modify

# namespace: StreamInfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GraphMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGraphMetadata(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GraphMetadata()
        x.Init(buf, n + offset)
        return x

    # GraphMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GraphMetadata
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GraphMetadata
    def NumNodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # GraphMetadata
    def NumEdges(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def GraphMetadataStart(builder): builder.StartObject(3)
def GraphMetadataAddFilename(builder, filename): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)
def GraphMetadataAddNumNodes(builder, numNodes): builder.PrependUint64Slot(1, numNodes, 0)
def GraphMetadataAddNumEdges(builder, numEdges): builder.PrependUint64Slot(2, numEdges, 0)
def GraphMetadataEnd(builder): return builder.EndObject()
